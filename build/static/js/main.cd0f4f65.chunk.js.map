{"version":3,"sources":["App.js","i18n.js","serviceWorker.js","index.js"],"names":["App","useState","persons","setPersons","doFocusRef","useRef","focusRef","formRef","navigate","useNavigate","useTranslation","t","i18n","useEffect","current","focus","id","className","ref","onSubmit","event","preventDefault","values","serializeForm","target","hash","ages","filter","v","map","Array","from","length","_","index","arr","key","undefined","AgeSelect","defaultValue","type","onClick","props","name","value","Infection","location","useLocation","parseAges","search","setTimeout","age","DiceRoll","to","i18nKey","href","rates","state","setState","rolls","setRolls","rate","useMemo","maxAge","timer","rando","Math","random","clearTimeout","data-state","aria-label","role","toFixed","disabled","KillCount","infected","setInfected","weeks","setWeeks","killed","round","aria-hidden","Killers","style","display","border","width","alt","src","params","URLSearchParams","get","split","str","Number","e","AppRoot","window","scrollTo","path","element","use","Backend","LanguageDetector","initReactI18next","init","debug","interpolation","escapeValue","lng","ns","defaultNS","Boolean","hostname","match","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cd0f4f65.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from \"react\"\nimport serializeForm from \"form-serialize\"\nimport {\n  BrowserRouter,\n  Route,\n  Routes,\n  useNavigate,\n  useLocation,\n  Link\n} from \"react-router-dom\"\nimport { useTranslation, Trans } from 'react-i18next';\n\nfunction App() {\n  let [persons, setPersons] = useState(4)\n  let doFocusRef = useRef(false)\n  let focusRef = useRef()\n  let formRef = useRef()\n  let navigate = useNavigate()\n\n  const { t, i18n } = useTranslation();\n\n  useEffect(() => {\n    if (doFocusRef.current === false) {\n      doFocusRef.current = true\n    } else {\n      focusRef.current.focus()\n    }\n  }, [persons])\n\n  function handleSubmit(event) {\n    event.preventDefault()\n    let values = serializeForm(event.target, { hash: true }).ages.filter(\n      v => v !== \"UNSET\"\n    )\n    navigate(`infected/?ages=${values.map(v => v)}`)\n  }\n\n  return (\n    <div id=\"App\">\n      <div className=\"prelude\">\n        <h1>{t('title')}</h1>\n        <p>{t('intro')}</p>\n      </div>\n      <hr />\n      <form id=\"HouseHoldForm\" ref={formRef} onSubmit={handleSubmit}>\n        {Array.from({ length: persons }).map((_, index, arr) => (\n          <label\n            key={index}\n            ref={arr.length - 1 === index ? focusRef : undefined}\n          >\n            <span>\n              {index === 0 ? t('form.your-age') : t('form.household-member', {index: index})}:\n            </span>{\" \"}\n            <AgeSelect defaultValue={index < 2 ? 40 : undefined} />\n          </label>\n        ))}\n        <button type=\"button\" onClick={() => setPersons(persons + 1)}>\n          {t('form.add-another')}\n        </button>\n        <button type=\"submit\">{t('form.next')}</button>\n      </form>\n    </div>\n  )\n}\n\nfunction AgeSelect(props) {\n  const { t } = useTranslation();\n  return (\n    <select name=\"ages\" {...props}>\n      <option value=\"UNSET\">{t('form.set-age')}</option>\n      {Array.from({ length: 100 }).map((_, index) => (\n        <option key={index}>{index}</option>\n      ))}\n    </select>\n  )\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction Infection() {\n  const { t } = useTranslation();\n\n  let location = useLocation()\n  let navigate = useNavigate()\n  let ages = parseAges(location.search)\n  if (ages === null) {\n    setTimeout(() => navigate(\"/\"), [])\n    return null\n  }\n\n  return (\n    <div id=\"App\">\n      <div className=\"prelude\">\n        <h1>{t('infected.title')}</h1>\n        <p>{t('infected.paragraph1')}</p>\n      </div>\n      <div id=\"DiceRolls\" className=\"center\">\n        {ages.map((age, index) => (\n          <DiceRoll key={index} age={age} />\n        ))}\n      </div>\n      <p>{t('infected.paragraph2')}</p>\n      <Link className=\"big-link\" to={`/killers${location.search}`}>{t('infected.kill-count')}</Link>\n\n      <hr />\n      <h2>{t('infected.more-info')}</h2>\n      <p>\n        <Trans i18nKey=\"infected.paragraph3\">\n          Unless you're over 60, or are immuno-comprimised{\" \"} <i>(lots of your friends and family are!)</i> you're going to have to click the button a lot before you die.\n        </Trans>\n      </p>\n      {/*TODO: italic formatting in parahraph3*/}\n      <p>{t('infected.paragraph4')}</p>\n      <p>\n        <Trans i18nKey=\"infected.paragraph5\">\n          Not quite. People have been quoting how many deaths per year there are for the flu (<a href=\"https://www.cdc.gov/flu/about/burden/index.html#:~:text=\"> 12,000 to 61,000 </a>) to the deaths so far with coronavirus (<a href=\"https://www.cnn.com/interactive/2020/health/coronavirus-maps-and-cases/\">~50</a>) in the US.\n        </Trans>\n      </p>\n      <p>{t('infected.paragraph6')}</p>\n      <ul>\n        <li>{t('infected.fatality-rate')}</li>\n        <li>{t('infected.infection-growth-rate')}</li>\n      </ul>\n      <p>\n        <Trans i18nKey=\"infected.paragraph7\">\n          The flu has a general fatality rate of 0.1%<br />COVID-19's fatality rate right now is 3.4%\n        </Trans>\n      </p>\n      <p>\n        <Trans i18nKey=\"infected.paragraph8\">\n          <a href=\"https://www.sciencealert.com/covid-19-s-death-rate-is-higher-than-thought-but-it-should-drop\">That's 34x</a>. The red bar here is 34 times bigger.\n        </Trans>\n      </p>\n\n      <div className=\"bars\">\n        <div className=\"bar covid\">\n          <span className=\"padding-adjust\">{t('infected.covid-19')}</span>\n        </div>\n        <div className=\"bar flu\">\n          <span className=\"padding-adjust\">{t('infected.influenza')}</span>\n        </div>\n      </div>\n      <p>\n        <Trans i18nKey=\"infected.paragraph9\">\n          It's easy to tell this virus is worse even without all the data, <b>the flu doesn't completely overwhelm the health care system</b> in Italy each year, but <a href=\"https://www.theatlantic.com/ideas/archive/2020/03/who-gets-hospital-bed/607807/\">that's exactly what coronavirus has done</a>.\n        </Trans>\n      </p>\n      <p>{t('infected.paragraph10')}</p>\n      <p>{t('infected.paragraph11')}</p>\n    </div>\n  )\n}\n\n// https://www.worldometers.info/coronavirus/coronavirus-age-sex-demographics/\nlet rates = [\n  [9, 0],\n  [19, 0.002],\n  [29, 0.002],\n  [39, 0.002],\n  [49, 0.004],\n  [59, 0.013],\n  [69, 0.036],\n  [79, 0.08],\n  [79, 0.148]\n]\n\nfunction DiceRoll({ age }) {\n  let [state, setState] = useState(\"alive\") // alive, dead, rolling\n  let [rolls, setRolls] = useState(0)\n\n  let rate = useMemo(() => {\n    let rate\n    for (let [maxAge, ageRate] of rates) {\n      rate = ageRate\n      if (age < maxAge) break\n    }\n    return rate\n  }, [age])\n\n  function rollDice() {\n    setRolls(rolls + 1)\n    setState(\"rolling\")\n  }\n\n  useEffect(() => {\n    if (state === \"rolling\") {\n      let timer = setTimeout(() => {\n        let rando = Math.random()\n        if (rando <= rate) {\n          setState(\"dead\")\n        } else {\n          setState(\"alive\")\n        }\n      }, 200)\n      return () => {\n        clearTimeout(timer)\n      }\n    }\n  }, [state, rate])\n\n  return (\n    <div className=\"DiceRoll\" data-state={state}>\n      <div>\n        <span aria-label={state} role=\"img\">\n          {state === \"dead\"\n            ? \"💀\"\n            : state === \"alive\"\n            ? \"😅\"\n            : state === \"rolling\"\n            ? \"🤮\"\n            : null}\n        </span>{\" \"}\n        <span>\n          <b>{age} year old</b>\n          <br />\n          Fatality Rate: {(rate * 100).toFixed(1)}%\n        </span>\n      </div>\n      <div>\n        <button disabled={state === \"dead\"} onClick={rollDice}>\n          Roll the dice\n        </button>{\" \"}\n        <span>Rolls: {rolls}</span>\n      </div>\n    </div>\n  )\n}\n\n////////////////////////////////////////////////////////////////////////////////\nfunction KillCount({ ages }) {\n  const { t } = useTranslation();\n  let [infected, setInfected] = useState(1)\n  let [weeks, setWeeks] = useState(1)\n  let rate = 0.034\n  let Ro = 2\n\n  let killed = Math.round(infected * rate)\n\n  function nextWeek() {\n    setInfected(infected * Ro)\n    setWeeks(weeks + 1)\n  }\n\n  return (\n    <div id=\"KillCount\">\n      <div aria-hidden=\"true\">\n        {Array.from({ length: killed }).map((_, index) => (\n          // eslint-disable-next-line\n          <span key={index}>💀</span>\n        ))}\n      </div>\n      <p>{t('killers.form.weeks', {weeks: weeks})}</p>\n      <p>{t('killers.form.infected', {infected: infected})}</p>\n      <p>{t('killers.form.killed', {killed: killed})}</p>\n      <button onClick={nextWeek}>{t('killers.form.next-week')}</button>\n    </div>\n  )\n}\n\nfunction Killers() {\n  const { t } = useTranslation()\n  let location = useLocation()\n  let navigate = useNavigate()\n  let ages = parseAges(location.search)\n  if (ages === null) {\n    setTimeout(() => navigate(\"/\"), [])\n    return null\n  }\n\n  return (\n    <div id=\"App\">\n      <div className=\"prelude\">\n        <h1>{t('killers.title')}</h1>\n        <p>{t('killers.paragraph1')}</p>\n        <p>{t('killers.paragraph2')}</p>\n        <p>{t('killers.paragraph3')}</p>\n      </div>\n      <KillCount ages={ages} />\n      <p>\n        <Trans i18nKey=\"killers.paragraph4\">\n          So please, stay home. And while you're there <a href=\"https://medium.com/@joschabach/flattening-the-curve-is-a-deadly-delusion-eea324fe9727\">I think this article is worth your time.</a>. Containment seems to be the best action right now given the numbers.\n        </Trans>\n      </p>\n      <hr />\n      <h2>{t('killers.more-info')}</h2>\n      <p>\n        <Trans i18nKey=\"killers.paragraph5\">\n          <Link to={`/infected${location.search}`}>On the previous page we looked at the fatality rate</Link> of COVID-19 and saw that statistically, you and your family will probably be fine, but social distancing isn't about you.\n        </Trans>\n      </p>\n      <p>{t('killers.paragraph6')}</p>\n      <p>{t('killers.paragraph7')}</p>\n      <a\n        style={{ display: \"block\", border: \"solid 1px\" }}\n        href=\"https://www.worldometers.info/coronavirus/country/us/\"\n      >\n        <img\n          style={{ width: \"100%\" }}\n          alt={t('killers.image-alt-text')}\n          src=\"/graph.png\"\n        />\n      </a>\n      <p>\n        <Trans i18nKey=\"killers.paragraph8\">\n          The <i>Attack Rate</i> of COVID-19 is estimated by the World Health Organization to be <a href=\"https://www.worldometers.info/coronavirus/#repro\">between 1.4 and 2.5</a>. That means if you get it, you're going to infect 2 other people (other studies have it as high as 4!). By comparison, the flu is 1.3 and anything less than 1 will just die off.\n        </Trans>\n      </p>\n    </div>\n  )\n}\n\nfunction parseAges(search) {\n  let params = new URLSearchParams(search)\n  try {\n    return params\n      .get(\"ages\")\n      .split(\",\")\n      .map(str => Number(str))\n  } catch (e) {\n    return null\n  }\n}\n\nfunction AppRoot() {\n  let location = useLocation()\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, [location])\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />} />\n      <Route path=\"/infected\" element={<Infection />} />\n      <Route path=\"/killers\" element={<Killers />} />\n    </Routes>\n  )\n}\n\nexport default () => (\n  <BrowserRouter>\n    <AppRoot />\n  </BrowserRouter>\n)\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// not like to use this?\n// have a look at the Quick start guide\n// for passing in lng and locales on init\n\ni18n\n  // load translation using xhr -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    debug: true,\n    interpolation: { escapeValue: false },  // React already does escaping\n    lng: 'hu',                              // language to use\n    ns: ['common'],\n    defaultNS: 'common',\n  });\n\n\nexport default i18n;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Suspense fallback=\"loading\">\n    <App />\n  </Suspense>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}